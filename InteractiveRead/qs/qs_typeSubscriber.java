//*****************************************************************************
//*    (c) 2005-2018 Copyright, Real-Time Innovations, All rights reserved.   *
//*                                                                           *
//*         Permission to modify and use for internal purposes granted.       *
//* This software is provided "as is", without warranty, express or implied.  *
//*                                                                           *
//*****************************************************************************

package qs;

/* qs_typeSubscriber.java

A publication of data of type qs_type

This file is derived from code automatically generated by the rtiddsgen 
command:

rtiddsgen -language java -example <arch> .idl

Example publication of type qs_type automatically generated by 
'rtiddsgen' To test them follow these steps:

(1) Compile this file and the example subscription.

(2) Start the subscription on the same domain used for RTI Data Distribution
Service with the command
java qs_typeSubscriber <domain_id> <sample_count>

(3) Start the publication on the same domain used for RTI Data Distribution
Service with the command
java qs_typePublisher <domain_id> <sample_count>

(4) [Optional] Specify the list of discovery initial peers and 
multicast receive addresses via an environment variable or a file 
(in the current working directory) called NDDS_DISCOVERY_PEERS. 

You can run any number of publishers and subscribers programs, and can 
add and remove them dynamically from the domain.

Example:

To run the example application on domain <domain_id>:

Ensure that $(NDDSHOME)/lib/<arch> is on the dynamic library path for
Java.                       

On UNIX systems: 
add $(NDDSHOME)/lib/<arch> to the 'LD_LIBRARY_PATH' environment
variable

On Windows systems:
add %NDDSHOME%\lib\<arch> to the 'Path' environment variable

Run the Java applications:

java -Djava.ext.dirs=$NDDSHOME/class qs_typePublisher <domain_id>

java -Djava.ext.dirs=$NDDSHOME/class qs_typeSubscriber <domain_id>  
*/

//import java.net.InetAddress;
//import java.net.UnknownHostException;
//import java.util.Arrays;
import java.util.Scanner;

import com.rti.dds.domain.*;
import com.rti.dds.infrastructure.*;
import com.rti.dds.subscription.*;
import com.rti.dds.topic.*;
//import com.rti.ndds.config.*;


public class qs_typeSubscriber {

    public static void main(String[] args) {
        // --- Get domain ID --- //
        int domainId = 0;
        if (args.length >= 1) {
            domainId = Integer.valueOf(args[0]).intValue();
        }

        // Run
        subscriberMain(domainId);
    }

    private qs_typeSubscriber() {
        super();
    }

    private static void subscriberMain(int domainId) {

        DomainParticipant participant = null;
        Subscriber subscriber = null;
        Topic topic = null;
        qs_typeDataReader reader = null;
        qs_typeSeq _dataSeq = new qs_typeSeq();
        SampleInfoSeq _infoSeq = new SampleInfoSeq();

        try {

            // Create participant

            participant = DomainParticipantFactory.TheParticipantFactory.create_participant(
                domainId, 
                DomainParticipantFactory.PARTICIPANT_QOS_DEFAULT,
                null /* listener */, 
                StatusKind.STATUS_MASK_NONE);
            if (participant == null) {
                System.err.println("create_participant error\n");
                return;
            }                         

            // Create subscriber
            
            subscriber = participant.create_subscriber(
                DomainParticipant.SUBSCRIBER_QOS_DEFAULT, 
                null /* listener */,
                StatusKind.STATUS_MASK_NONE);
            if (subscriber == null) {
                System.err.println("create_subscriber error\n");
                return;
            }     

            // Register type before creating topic 
            
            String typeName = qs_typeTypeSupport.get_type_name(); 
            qs_typeTypeSupport.register_type(participant, typeName);

            // Create topic
            
            topic = participant.create_topic(
                qs.topicName.VALUE,
                typeName, 
                DomainParticipant.TOPIC_QOS_DEFAULT,
                null /* listener */, 
                StatusKind.STATUS_MASK_NONE);
            if (topic == null) {
                System.err.println("create_topic error\n");
                return;
            }                     

            // Create reader

            reader = (qs_typeDataReader)subscriber.create_datareader(
                topic, 
                Subscriber.DATAREADER_QOS_DEFAULT, 
                null /* listener */,
                StatusKind.STATUS_MASK_ALL);
            if (reader == null) {
                System.err.println("create_datareader error\n");
                return;
            }                         

            // loop to prompt the user, then read/take

    		Scanner userInput = new Scanner(System.in);
    		String action = "";
    		
    		while (!action.equals("q")) {
    			
    			System.out.println("Please select:");
    			System.out.println("  'ra' to read() and display ALL of the samples in the buffer");
    			System.out.println("  'rn' to read() and display only the samples NOT PREVIOUSLY READ");
    			System.out.println("  't' to take() samples from the queue");
    			System.out.println("  'q' to quit");
    			
				action = userInput.nextLine().toLowerCase();
				
				try {

					switch (action) {
						case "ra":
							System.out.println("Read all of the samples");
							reader.read(
								_dataSeq, 
								_infoSeq,
								ResourceLimitsQosPolicy.LENGTH_UNLIMITED,
								SampleStateKind.ANY_SAMPLE_STATE,
								ViewStateKind.ANY_VIEW_STATE,
								InstanceStateKind.ANY_INSTANCE_STATE);
							break;
						case "rn":
							System.out.println("Read the UNREAD samples");
							reader.read(
        	        			_dataSeq, 
        	                    _infoSeq,
        	                    ResourceLimitsQosPolicy.LENGTH_UNLIMITED,
        	                    SampleStateKind.NOT_READ_SAMPLE_STATE, // we only want the unread samples
        	                    ViewStateKind.ANY_VIEW_STATE,
								InstanceStateKind.ANY_INSTANCE_STATE);
							break;
						case "t":
							System.out.println("Take the samples");
							reader.take(
								_dataSeq, 
								_infoSeq,
								ResourceLimitsQosPolicy.LENGTH_UNLIMITED,
								SampleStateKind.ANY_SAMPLE_STATE,
								ViewStateKind.ANY_VIEW_STATE,
								InstanceStateKind.ANY_INSTANCE_STATE);
							break;	
						case "q":
							break;
						default:
							System.out.println("Try Again... ");
							break;
					}
					
					for(int i = 0; i < _dataSeq.size(); ++i) {
						SampleInfo info = (SampleInfo)_infoSeq.get(i);

						if (info.valid_data) {
							System.out.println(">> name = " + _dataSeq.get(i).name);
							System.out.println(">> value1 = " + _dataSeq.get(i).value1);
							System.out.println();
						}
					}

				} catch (RETCODE_NO_DATA noData) {
    	            // No data to process
    	            System.out.println(">> No data to process");
    	        } finally {
    	            reader.return_loan(_dataSeq, _infoSeq);
    	        }
    			
			}
			// close the scanner
    		userInput.close();
		
		} finally {
        	
            // Shutdown
            if(participant != null) {
                participant.delete_contained_entities();
                DomainParticipantFactory.TheParticipantFactory.
                delete_participant(participant);
            }
        }
    }
}

