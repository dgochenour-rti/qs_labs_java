//*****************************************************************************
//*    (c) 2005-2018 Copyright, Real-Time Innovations, All rights reserved.   *
//*                                                                           *
//*         Permission to modify and use for internal purposes granted.       *
//* This software is provided "as is", without warranty, express or implied.  *
//*                                                                           *
//*****************************************************************************

package qs;

/* qs_typeSubscriber.java

A publication of data of type qs_type

This file is derived from code automatically generated by the rtiddsgen 
command:

rtiddsgen -language java -example <arch> .idl

Example publication of type qs_type automatically generated by 
'rtiddsgen' To test them follow these steps:

(1) Compile this file and the example subscription.

(2) Start the subscription on the same domain used for RTI Data Distribution
Service with the command
java qs_typeSubscriber <domain_id> <sample_count>

(3) Start the publication on the same domain used for RTI Data Distribution
Service with the command
java qs_typePublisher <domain_id> <sample_count>

(4) [Optional] Specify the list of discovery initial peers and 
multicast receive addresses via an environment variable or a file 
(in the current working directory) called NDDS_DISCOVERY_PEERS. 

You can run any number of publishers and subscribers programs, and can 
add and remove them dynamically from the domain.

Example:

To run the example application on domain <domain_id>:

Ensure that $(NDDSHOME)/lib/<arch> is on the dynamic library path for
Java.                       

On UNIX systems: 
add $(NDDSHOME)/lib/<arch> to the 'LD_LIBRARY_PATH' environment
variable

On Windows systems:
add %NDDSHOME%\lib\<arch> to the 'Path' environment variable

Run the Java applications:

java -Djava.ext.dirs=$NDDSHOME/class qs_typePublisher <domain_id>

java -Djava.ext.dirs=$NDDSHOME/class qs_typeSubscriber <domain_id>  
*/

import java.net.InetAddress;
import java.net.UnknownHostException;
import java.util.Arrays;

import com.rti.dds.domain.*;
import com.rti.dds.infrastructure.*;
import com.rti.dds.subscription.*;
import com.rti.dds.topic.*;
import com.rti.ndds.config.*;

// ===========================================================================

public class qs_typeSubscriber {
    // -----------------------------------------------------------------------
    // Public Methods
    // -----------------------------------------------------------------------

    public static void main(String[] args) {
        // --- Get domain ID --- //
        int domainId = 0;
        if (args.length >= 1) {
            domainId = Integer.valueOf(args[0]).intValue();
        }

        // -- Get max loop count; 0 means infinite loop --- //
        int sampleCount = 0;
        if (args.length >= 2) {
            sampleCount = Integer.valueOf(args[1]).intValue();
        }

        /* Uncomment this to turn on additional logging
        Logger.get_instance().set_verbosity_by_category(
            LogCategory.NDDS_CONFIG_LOG_CATEGORY_API,
            LogVerbosity.NDDS_CONFIG_LOG_VERBOSITY_STATUS_ALL);
        */

        // --- Run --- //
        subscriberMain(domainId, sampleCount);
    }

    // -----------------------------------------------------------------------
    // Private Methods
    // -----------------------------------------------------------------------

    // --- Constructors: -----------------------------------------------------

    private qs_typeSubscriber() {
        super();
    }

    // -----------------------------------------------------------------------

    private static void subscriberMain(int domainId, int sampleCount) {

        DomainParticipant participant = null;
        Subscriber subscriber = null;
        Topic topic = null;
        DataReaderListener listener = null;
        qs_typeDataReader reader = null;

        try {

            // --- Create participant --- //

            // LAB#6 
            // To load MY_QOS_PROFILES.xml, we need to modify the 
            // DDSTheParticipantFactory Profile QoSPolicy 
        	DomainParticipantFactoryQos factoryQos = 
        		    new DomainParticipantFactoryQos();
        	DomainParticipantFactory.TheParticipantFactory.get_qos(factoryQos);
            
            // LAB#6 
            // We are only adding one XML file to the url_profile sequence, so 
            // we set a maximum length of 1 
        	factoryQos.profile.url_profile.setMaximum(1);

            // LAB#6
            // Now load our custom file into the sequence, and then call
            // set_qos() to make our modified file be the QoS provider
        	factoryQos.profile.url_profile.add("file://MY_QOS_PROFILES.xml");
            DomainParticipantFactory.TheParticipantFactory.set_qos(factoryQos);

            // LAB #6
            // specify profile
            participant = DomainParticipantFactory.TheParticipantFactory.create_participant_with_profile(
                    domainId, 
                    "MyLibrary",
                    "MyProfile",
                    null /* listener */, 
                    StatusKind.STATUS_MASK_NONE);
            if (participant == null) {
                System.err.println("create_participant error\n");
                return;
            }                          

            // --- Create subscriber --- //

            // LAB #6
            // specify profile
            subscriber = participant.create_subscriber_with_profile(
                    "MyLibrary",
                    "MyProfile", 
                    null /* listener */,
                    StatusKind.STATUS_MASK_NONE);
            if (subscriber == null) {
                System.err.println("create_subscriber error\n");
                return;
            }     

            // --- Create topic --- //

            /* Register type before creating topic */
            String typeName = qs_typeTypeSupport.get_type_name(); 
            qs_typeTypeSupport.register_type(participant, typeName);


            // LAB #4 - use variable defined in IDL for topic name
            topic = participant.create_topic(
                qs.topicName.VALUE,
                typeName, DomainParticipant.TOPIC_QOS_DEFAULT,
                null /* listener */, StatusKind.STATUS_MASK_NONE);
            if (topic == null) {
                System.err.println("create_topic error\n");
                return;
            }                     

            // --- Create reader --- //

            listener = new qs_typeListener();

            // LAB #6
            // specify profile
            // LAB #7 
            // Change the mask from STATUS_MASK_ALL to ommit the 
            // "on data Available" mask. This is because we will handle that 
            // via a waitset.
            reader = (qs_typeDataReader)subscriber.create_datareader_with_profile(
                    topic, 
                    "MyLibrary",
                    "MyProfile", 
                    listener,
                    StatusKind.REQUESTED_DEADLINE_MISSED_STATUS | 
                            StatusKind.REQUESTED_INCOMPATIBLE_QOS_STATUS);
            if (reader == null) {
                System.err.println("create_datareader error\n");
                return;
            }                         
            // LAB #7 -- Get status conditions
            //
            // Each entity may have an attached Status Condition. To modify the
            // statuses we need to get the reader's Status Conditions first.

            StatusCondition status_condition = reader.get_statuscondition();
            if (status_condition == null) {
                System.err.println("get_statuscondition error\n");
                return;
            }

            // LAB #7 -- Set enabled statuses
            // 
            // Now that we have the Status Condition, we are going to enable the
            // status we are interested in: knowing that data is available

            status_condition.set_enabled_statuses(
                StatusKind.DATA_AVAILABLE_STATUS);

            // LAB #7 -- Create and attach conditions to the WaitSet
            // 
            // Finally, we create the WaitSet and attach the Status Condition 
            // to it.

            WaitSet waitset = new WaitSet();
            waitset.attach_condition(status_condition);

            // --- Wait for data --- //

            // LAB #7 -- comment out receivePeriodSec 
            // final long receivePeriodSec = 4;

            // LAB #7 -- this for loop is completely refactored
            for (int count = 0; (sampleCount == 0) || (count < sampleCount); ++count) {

                // LAB #7 -- setup the wait() timeout duration
                ConditionSeq active_conditions_seq = new ConditionSeq();
                Duration_t wait_timeout = new Duration_t();
                wait_timeout.sec = 1;
                wait_timeout.nanosec = 500000000;

                try {
                    //wait() blocks execution of the thread until one or more
                    // attached Conditions become true, or until a user- 
                    // specified timeout expires.
                    waitset.wait(active_conditions_seq, wait_timeout);
                    // We get to timeout if no conditions were triggered
                } catch (RETCODE_TIMEOUT e) {
                    System.out.println(
                          "wait() timed out: No conditions were triggered.\n");
                    continue;
                }

                // If the code gets to this point, then we were triggered by the
                // waitset and our DATA_AVAILABLE_STATUS condition.     

                qs_typeSeq data_seq = new qs_typeSeq();
                SampleInfoSeq info_seq = new SampleInfoSeq();

                try {
                    reader.take(
                        data_seq, 
                        info_seq,
                        ResourceLimitsQosPolicy.LENGTH_UNLIMITED,
                        SampleStateKind.ANY_SAMPLE_STATE,
                        ViewStateKind.ANY_VIEW_STATE,
                        InstanceStateKind.ANY_INSTANCE_STATE);
    
                    for(int i = 0; i < data_seq.size(); ++i) {
                        SampleInfo info = (SampleInfo)info_seq.get(i);
    
                        if (info.valid_data) {
                            System.out.println(
                                ((qs_type)data_seq.get(i)).toString("Received",0));
    
                        }
                    }
                } catch (RETCODE_NO_DATA noData) {
                    // No data to process
                    System.out.println("No data");
                } finally {
                    reader.return_loan(data_seq, info_seq);
                }                

                // LAB #7 -- comment out this 4s delay, as we don't need it...
                // we're getting a 1.5s sleep from the wait() call
                /*
                try {
                    Thread.sleep(receivePeriodSec * 1000);  // in millisec
                } catch (InterruptedException ix) {
                    System.err.println("INTERRUPTED");
                    break;
                }
                */
            }
        } finally {

            // --- Shutdown --- //

            if(participant != null) {
                participant.delete_contained_entities();

                DomainParticipantFactory.TheParticipantFactory.
                delete_participant(participant);
            }
            /* RTI Data Distribution Service provides the finalize_instance()
            method for users who want to release memory used by the
            participant factory singleton. Uncomment the following block of
            code for clean destruction of the participant factory
            singleton. */
            //DomainParticipantFactory.finalize_instance();
        }
    }

    // -----------------------------------------------------------------------
    // Private Types
    // -----------------------------------------------------------------------

    // =======================================================================

    private static class qs_typeListener extends DataReaderAdapter {

        // LAB #7 -- get rid of the on_data_available() listener
        /*
        qs_typeSeq _dataSeq = new qs_typeSeq();
        SampleInfoSeq _infoSeq = new SampleInfoSeq();

        public void on_data_available(DataReader reader) {
            qs_typeDataReader qs_typeReader =
            (qs_typeDataReader)reader;

            try {
                qs_typeReader.take(
                    _dataSeq, _infoSeq,
                    ResourceLimitsQosPolicy.LENGTH_UNLIMITED,
                    SampleStateKind.ANY_SAMPLE_STATE,
                    ViewStateKind.ANY_VIEW_STATE,
                    InstanceStateKind.ANY_INSTANCE_STATE);

                for(int i = 0; i < _dataSeq.size(); ++i) {
                    SampleInfo info = (SampleInfo)_infoSeq.get(i);

                    if (info.valid_data) {
                        System.out.println(
                            ((qs_type)_dataSeq.get(i)).toString("Received",0));

                    }
                }
            } catch (RETCODE_NO_DATA noData) {
                // No data to process
            } finally {
                qs_typeReader.return_loan(_dataSeq, _infoSeq);
            }
        }
        */

        // LAB #2 -- add the following two listeners to get more information on the 
        // communications failure

        public void on_requested_deadline_missed(
            DataReader reader,
            RequestedDeadlineMissedStatus status) 
	    {
            System.out.println("ReaderListener: on_requested_deadline_missed()");
        }    
   
        public void on_requested_incompatible_qos(
            DataReader reader,
            RequestedIncompatibleQosStatus status) 
	    {
            System.out.println("ReaderListener: on_requested_incompatible_qos()");
            System.out.println(status.last_policy_id.toString());
        }
    }
}

